// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Export struct {
	ID      string       `json:"id"`
	AppKey  string       `json:"appKey"`
	Segment *Segment     `json:"segment"`
	Name    string       `json:"name"`
	Module  ExportModule `json:"module"`
	Status  JobStatus    `json:"status"`
}

type NewExport struct {
	AppKey    string       `json:"appKey"`
	SegmentID string       `json:"segmentId"`
	Name      string       `json:"name"`
	Module    ExportModule `json:"module"`
}

type Notification struct {
	ID      string              `json:"id"`
	AppKey  string              `json:"appKey"`
	Segment *Segment            `json:"segment"`
	Name    string              `json:"name"`
	Channel NotificationChannel `json:"channel"`
}

type Segment struct {
	ID          string  `json:"id"`
	AppKey      string  `json:"appKey"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Version     int     `json:"version"`
}

type ExportModule string

const (
	ExportModuleUsers ExportModule = "USERS"
	ExportModuleAds   ExportModule = "ADS"
)

var AllExportModule = []ExportModule{
	ExportModuleUsers,
	ExportModuleAds,
}

func (e ExportModule) IsValid() bool {
	switch e {
	case ExportModuleUsers, ExportModuleAds:
		return true
	}
	return false
}

func (e ExportModule) String() string {
	return string(e)
}

func (e *ExportModule) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExportModule(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExportModule", str)
	}
	return nil
}

func (e ExportModule) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobStatus string

const (
	JobStatusCreated JobStatus = "CREATED"
	JobStatusRunning JobStatus = "RUNNING"
	JobStatusFailed  JobStatus = "FAILED"
	JobStatusDone    JobStatus = "DONE"
)

var AllJobStatus = []JobStatus{
	JobStatusCreated,
	JobStatusRunning,
	JobStatusFailed,
	JobStatusDone,
}

func (e JobStatus) IsValid() bool {
	switch e {
	case JobStatusCreated, JobStatusRunning, JobStatusFailed, JobStatusDone:
		return true
	}
	return false
}

func (e JobStatus) String() string {
	return string(e)
}

func (e *JobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobStatus", str)
	}
	return nil
}

func (e JobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationChannel string

const (
	NotificationChannelEmail   NotificationChannel = "EMAIL"
	NotificationChannelSms     NotificationChannel = "SMS"
	NotificationChannelBrowser NotificationChannel = "BROWSER"
)

var AllNotificationChannel = []NotificationChannel{
	NotificationChannelEmail,
	NotificationChannelSms,
	NotificationChannelBrowser,
}

func (e NotificationChannel) IsValid() bool {
	switch e {
	case NotificationChannelEmail, NotificationChannelSms, NotificationChannelBrowser:
		return true
	}
	return false
}

func (e NotificationChannel) String() string {
	return string(e)
}

func (e *NotificationChannel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationChannel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationChannel", str)
	}
	return nil
}

func (e NotificationChannel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
