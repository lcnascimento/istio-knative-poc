// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExportsServiceFrontendClient is the client API for ExportsServiceFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportsServiceFrontendClient interface {
	GetExport(ctx context.Context, in *GetExportRequest, opts ...grpc.CallOption) (*GetExportResponse, error)
	ListExports(ctx context.Context, in *ListExportsRequest, opts ...grpc.CallOption) (*ListExportsResponse, error)
	EnqueueExport(ctx context.Context, in *EnqueueExportRequest, opts ...grpc.CallOption) (*Void, error)
}

type exportsServiceFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewExportsServiceFrontendClient(cc grpc.ClientConnInterface) ExportsServiceFrontendClient {
	return &exportsServiceFrontendClient{cc}
}

func (c *exportsServiceFrontendClient) GetExport(ctx context.Context, in *GetExportRequest, opts ...grpc.CallOption) (*GetExportResponse, error) {
	out := new(GetExportResponse)
	err := c.cc.Invoke(ctx, "/grpc.ExportsServiceFrontend/GetExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportsServiceFrontendClient) ListExports(ctx context.Context, in *ListExportsRequest, opts ...grpc.CallOption) (*ListExportsResponse, error) {
	out := new(ListExportsResponse)
	err := c.cc.Invoke(ctx, "/grpc.ExportsServiceFrontend/ListExports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportsServiceFrontendClient) EnqueueExport(ctx context.Context, in *EnqueueExportRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/grpc.ExportsServiceFrontend/EnqueueExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExportsServiceFrontendServer is the server API for ExportsServiceFrontend service.
// All implementations must embed UnimplementedExportsServiceFrontendServer
// for forward compatibility
type ExportsServiceFrontendServer interface {
	GetExport(context.Context, *GetExportRequest) (*GetExportResponse, error)
	ListExports(context.Context, *ListExportsRequest) (*ListExportsResponse, error)
	EnqueueExport(context.Context, *EnqueueExportRequest) (*Void, error)
	mustEmbedUnimplementedExportsServiceFrontendServer()
}

// UnimplementedExportsServiceFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedExportsServiceFrontendServer struct {
}

func (UnimplementedExportsServiceFrontendServer) GetExport(context.Context, *GetExportRequest) (*GetExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExport not implemented")
}
func (UnimplementedExportsServiceFrontendServer) ListExports(context.Context, *ListExportsRequest) (*ListExportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExports not implemented")
}
func (UnimplementedExportsServiceFrontendServer) EnqueueExport(context.Context, *EnqueueExportRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueExport not implemented")
}
func (UnimplementedExportsServiceFrontendServer) mustEmbedUnimplementedExportsServiceFrontendServer() {
}

// UnsafeExportsServiceFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExportsServiceFrontendServer will
// result in compilation errors.
type UnsafeExportsServiceFrontendServer interface {
	mustEmbedUnimplementedExportsServiceFrontendServer()
}

func RegisterExportsServiceFrontendServer(s grpc.ServiceRegistrar, srv ExportsServiceFrontendServer) {
	s.RegisterService(&_ExportsServiceFrontend_serviceDesc, srv)
}

func _ExportsServiceFrontend_GetExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportsServiceFrontendServer).GetExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ExportsServiceFrontend/GetExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportsServiceFrontendServer).GetExport(ctx, req.(*GetExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportsServiceFrontend_ListExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportsServiceFrontendServer).ListExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ExportsServiceFrontend/ListExports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportsServiceFrontendServer).ListExports(ctx, req.(*ListExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportsServiceFrontend_EnqueueExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportsServiceFrontendServer).EnqueueExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ExportsServiceFrontend/EnqueueExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportsServiceFrontendServer).EnqueueExport(ctx, req.(*EnqueueExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExportsServiceFrontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ExportsServiceFrontend",
	HandlerType: (*ExportsServiceFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExport",
			Handler:    _ExportsServiceFrontend_GetExport_Handler,
		},
		{
			MethodName: "ListExports",
			Handler:    _ExportsServiceFrontend_ListExports_Handler,
		},
		{
			MethodName: "EnqueueExport",
			Handler:    _ExportsServiceFrontend_EnqueueExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/grpc/proto/exports.proto",
}

// ExportsServiceWorkerClient is the client API for ExportsServiceWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportsServiceWorkerClient interface {
	ProcessExport(ctx context.Context, in *ProcessExportRequest, opts ...grpc.CallOption) (*Void, error)
}

type exportsServiceWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewExportsServiceWorkerClient(cc grpc.ClientConnInterface) ExportsServiceWorkerClient {
	return &exportsServiceWorkerClient{cc}
}

func (c *exportsServiceWorkerClient) ProcessExport(ctx context.Context, in *ProcessExportRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/grpc.ExportsServiceWorker/ProcessExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExportsServiceWorkerServer is the server API for ExportsServiceWorker service.
// All implementations must embed UnimplementedExportsServiceWorkerServer
// for forward compatibility
type ExportsServiceWorkerServer interface {
	ProcessExport(context.Context, *ProcessExportRequest) (*Void, error)
	mustEmbedUnimplementedExportsServiceWorkerServer()
}

// UnimplementedExportsServiceWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedExportsServiceWorkerServer struct {
}

func (UnimplementedExportsServiceWorkerServer) ProcessExport(context.Context, *ProcessExportRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessExport not implemented")
}
func (UnimplementedExportsServiceWorkerServer) mustEmbedUnimplementedExportsServiceWorkerServer() {}

// UnsafeExportsServiceWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExportsServiceWorkerServer will
// result in compilation errors.
type UnsafeExportsServiceWorkerServer interface {
	mustEmbedUnimplementedExportsServiceWorkerServer()
}

func RegisterExportsServiceWorkerServer(s grpc.ServiceRegistrar, srv ExportsServiceWorkerServer) {
	s.RegisterService(&_ExportsServiceWorker_serviceDesc, srv)
}

func _ExportsServiceWorker_ProcessExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportsServiceWorkerServer).ProcessExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ExportsServiceWorker/ProcessExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportsServiceWorkerServer).ProcessExport(ctx, req.(*ProcessExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExportsServiceWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ExportsServiceWorker",
	HandlerType: (*ExportsServiceWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessExport",
			Handler:    _ExportsServiceWorker_ProcessExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/grpc/proto/exports.proto",
}
