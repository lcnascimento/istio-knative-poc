// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SegmentsServiceClient is the client API for SegmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentsServiceClient interface {
	GetSegmentUsers(ctx context.Context, in *GetSegmentUsersRequest, opts ...grpc.CallOption) (SegmentsService_GetSegmentUsersClient, error)
}

type segmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentsServiceClient(cc grpc.ClientConnInterface) SegmentsServiceClient {
	return &segmentsServiceClient{cc}
}

func (c *segmentsServiceClient) GetSegmentUsers(ctx context.Context, in *GetSegmentUsersRequest, opts ...grpc.CallOption) (SegmentsService_GetSegmentUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SegmentsService_ServiceDesc.Streams[0], "/grpc.SegmentsService/GetSegmentUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &segmentsServiceGetSegmentUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SegmentsService_GetSegmentUsersClient interface {
	Recv() (*GetSegmentUsersResponse, error)
	grpc.ClientStream
}

type segmentsServiceGetSegmentUsersClient struct {
	grpc.ClientStream
}

func (x *segmentsServiceGetSegmentUsersClient) Recv() (*GetSegmentUsersResponse, error) {
	m := new(GetSegmentUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SegmentsServiceServer is the server API for SegmentsService service.
// All implementations must embed UnimplementedSegmentsServiceServer
// for forward compatibility
type SegmentsServiceServer interface {
	GetSegmentUsers(*GetSegmentUsersRequest, SegmentsService_GetSegmentUsersServer) error
	mustEmbedUnimplementedSegmentsServiceServer()
}

// UnimplementedSegmentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSegmentsServiceServer struct {
}

func (UnimplementedSegmentsServiceServer) GetSegmentUsers(*GetSegmentUsersRequest, SegmentsService_GetSegmentUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSegmentUsers not implemented")
}
func (UnimplementedSegmentsServiceServer) mustEmbedUnimplementedSegmentsServiceServer() {}

// UnsafeSegmentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentsServiceServer will
// result in compilation errors.
type UnsafeSegmentsServiceServer interface {
	mustEmbedUnimplementedSegmentsServiceServer()
}

func RegisterSegmentsServiceServer(s grpc.ServiceRegistrar, srv SegmentsServiceServer) {
	s.RegisterService(&SegmentsService_ServiceDesc, srv)
}

func _SegmentsService_GetSegmentUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSegmentUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SegmentsServiceServer).GetSegmentUsers(m, &segmentsServiceGetSegmentUsersServer{stream})
}

type SegmentsService_GetSegmentUsersServer interface {
	Send(*GetSegmentUsersResponse) error
	grpc.ServerStream
}

type segmentsServiceGetSegmentUsersServer struct {
	grpc.ServerStream
}

func (x *segmentsServiceGetSegmentUsersServer) Send(m *GetSegmentUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SegmentsService_ServiceDesc is the grpc.ServiceDesc for SegmentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SegmentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.SegmentsService",
	HandlerType: (*SegmentsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSegmentUsers",
			Handler:       _SegmentsService_GetSegmentUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "application/grpc/proto/segments.proto",
}
