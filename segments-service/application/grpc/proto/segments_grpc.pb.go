// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SegmentsServiceFrontendClient is the client API for SegmentsServiceFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentsServiceFrontendClient interface {
	GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*GetSegmentResponse, error)
	GetSegmentUsers(ctx context.Context, in *GetSegmentUsersRequest, opts ...grpc.CallOption) (SegmentsServiceFrontend_GetSegmentUsersClient, error)
}

type segmentsServiceFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentsServiceFrontendClient(cc grpc.ClientConnInterface) SegmentsServiceFrontendClient {
	return &segmentsServiceFrontendClient{cc}
}

func (c *segmentsServiceFrontendClient) GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*GetSegmentResponse, error) {
	out := new(GetSegmentResponse)
	err := c.cc.Invoke(ctx, "/grpc.SegmentsServiceFrontend/GetSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentsServiceFrontendClient) GetSegmentUsers(ctx context.Context, in *GetSegmentUsersRequest, opts ...grpc.CallOption) (SegmentsServiceFrontend_GetSegmentUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SegmentsServiceFrontend_serviceDesc.Streams[0], "/grpc.SegmentsServiceFrontend/GetSegmentUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &segmentsServiceFrontendGetSegmentUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SegmentsServiceFrontend_GetSegmentUsersClient interface {
	Recv() (*GetSegmentUsersResponse, error)
	grpc.ClientStream
}

type segmentsServiceFrontendGetSegmentUsersClient struct {
	grpc.ClientStream
}

func (x *segmentsServiceFrontendGetSegmentUsersClient) Recv() (*GetSegmentUsersResponse, error) {
	m := new(GetSegmentUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SegmentsServiceFrontendServer is the server API for SegmentsServiceFrontend service.
// All implementations must embed UnimplementedSegmentsServiceFrontendServer
// for forward compatibility
type SegmentsServiceFrontendServer interface {
	GetSegment(context.Context, *GetSegmentRequest) (*GetSegmentResponse, error)
	GetSegmentUsers(*GetSegmentUsersRequest, SegmentsServiceFrontend_GetSegmentUsersServer) error
	mustEmbedUnimplementedSegmentsServiceFrontendServer()
}

// UnimplementedSegmentsServiceFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedSegmentsServiceFrontendServer struct {
}

func (UnimplementedSegmentsServiceFrontendServer) GetSegment(context.Context, *GetSegmentRequest) (*GetSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (UnimplementedSegmentsServiceFrontendServer) GetSegmentUsers(*GetSegmentUsersRequest, SegmentsServiceFrontend_GetSegmentUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSegmentUsers not implemented")
}
func (UnimplementedSegmentsServiceFrontendServer) mustEmbedUnimplementedSegmentsServiceFrontendServer() {
}

// UnsafeSegmentsServiceFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentsServiceFrontendServer will
// result in compilation errors.
type UnsafeSegmentsServiceFrontendServer interface {
	mustEmbedUnimplementedSegmentsServiceFrontendServer()
}

func RegisterSegmentsServiceFrontendServer(s grpc.ServiceRegistrar, srv SegmentsServiceFrontendServer) {
	s.RegisterService(&_SegmentsServiceFrontend_serviceDesc, srv)
}

func _SegmentsServiceFrontend_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentsServiceFrontendServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SegmentsServiceFrontend/GetSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentsServiceFrontendServer).GetSegment(ctx, req.(*GetSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentsServiceFrontend_GetSegmentUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSegmentUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SegmentsServiceFrontendServer).GetSegmentUsers(m, &segmentsServiceFrontendGetSegmentUsersServer{stream})
}

type SegmentsServiceFrontend_GetSegmentUsersServer interface {
	Send(*GetSegmentUsersResponse) error
	grpc.ServerStream
}

type segmentsServiceFrontendGetSegmentUsersServer struct {
	grpc.ServerStream
}

func (x *segmentsServiceFrontendGetSegmentUsersServer) Send(m *GetSegmentUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SegmentsServiceFrontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.SegmentsServiceFrontend",
	HandlerType: (*SegmentsServiceFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSegment",
			Handler:    _SegmentsServiceFrontend_GetSegment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSegmentUsers",
			Handler:       _SegmentsServiceFrontend_GetSegmentUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "application/grpc/proto/segments.proto",
}
