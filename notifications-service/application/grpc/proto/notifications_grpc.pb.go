// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotificationsServiceFrontendClient is the client API for NotificationsServiceFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceFrontendClient interface {
	GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error)
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
	EnqueueSendingNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*Void, error)
}

type notificationsServiceFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceFrontendClient(cc grpc.ClientConnInterface) NotificationsServiceFrontendClient {
	return &notificationsServiceFrontendClient{cc}
}

func (c *notificationsServiceFrontendClient) GetNotification(ctx context.Context, in *GetNotificationRequest, opts ...grpc.CallOption) (*GetNotificationResponse, error) {
	out := new(GetNotificationResponse)
	err := c.cc.Invoke(ctx, "/grpc.NotificationsServiceFrontend/GetNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceFrontendClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, "/grpc.NotificationsServiceFrontend/ListNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceFrontendClient) EnqueueSendingNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/grpc.NotificationsServiceFrontend/EnqueueSendingNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceFrontendServer is the server API for NotificationsServiceFrontend service.
// All implementations must embed UnimplementedNotificationsServiceFrontendServer
// for forward compatibility
type NotificationsServiceFrontendServer interface {
	GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error)
	ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error)
	EnqueueSendingNotification(context.Context, *SendNotificationRequest) (*Void, error)
	mustEmbedUnimplementedNotificationsServiceFrontendServer()
}

// UnimplementedNotificationsServiceFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceFrontendServer struct {
}

func (UnimplementedNotificationsServiceFrontendServer) GetNotification(context.Context, *GetNotificationRequest) (*GetNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotification not implemented")
}
func (UnimplementedNotificationsServiceFrontendServer) ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedNotificationsServiceFrontendServer) EnqueueSendingNotification(context.Context, *SendNotificationRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueSendingNotification not implemented")
}
func (UnimplementedNotificationsServiceFrontendServer) mustEmbedUnimplementedNotificationsServiceFrontendServer() {
}

// UnsafeNotificationsServiceFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceFrontendServer will
// result in compilation errors.
type UnsafeNotificationsServiceFrontendServer interface {
	mustEmbedUnimplementedNotificationsServiceFrontendServer()
}

func RegisterNotificationsServiceFrontendServer(s grpc.ServiceRegistrar, srv NotificationsServiceFrontendServer) {
	s.RegisterService(&_NotificationsServiceFrontend_serviceDesc, srv)
}

func _NotificationsServiceFrontend_GetNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceFrontendServer).GetNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.NotificationsServiceFrontend/GetNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceFrontendServer).GetNotification(ctx, req.(*GetNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsServiceFrontend_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceFrontendServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.NotificationsServiceFrontend/ListNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceFrontendServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsServiceFrontend_EnqueueSendingNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceFrontendServer).EnqueueSendingNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.NotificationsServiceFrontend/EnqueueSendingNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceFrontendServer).EnqueueSendingNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationsServiceFrontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.NotificationsServiceFrontend",
	HandlerType: (*NotificationsServiceFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotification",
			Handler:    _NotificationsServiceFrontend_GetNotification_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _NotificationsServiceFrontend_ListNotifications_Handler,
		},
		{
			MethodName: "EnqueueSendingNotification",
			Handler:    _NotificationsServiceFrontend_EnqueueSendingNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/grpc/proto/notifications.proto",
}

// NotificationsServiceWorkerClient is the client API for NotificationsServiceWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceWorkerClient interface {
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*Void, error)
}

type notificationsServiceWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceWorkerClient(cc grpc.ClientConnInterface) NotificationsServiceWorkerClient {
	return &notificationsServiceWorkerClient{cc}
}

func (c *notificationsServiceWorkerClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/grpc.NotificationsServiceWorker/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceWorkerServer is the server API for NotificationsServiceWorker service.
// All implementations must embed UnimplementedNotificationsServiceWorkerServer
// for forward compatibility
type NotificationsServiceWorkerServer interface {
	SendNotification(context.Context, *SendNotificationRequest) (*Void, error)
	mustEmbedUnimplementedNotificationsServiceWorkerServer()
}

// UnimplementedNotificationsServiceWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceWorkerServer struct {
}

func (UnimplementedNotificationsServiceWorkerServer) SendNotification(context.Context, *SendNotificationRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationsServiceWorkerServer) mustEmbedUnimplementedNotificationsServiceWorkerServer() {
}

// UnsafeNotificationsServiceWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceWorkerServer will
// result in compilation errors.
type UnsafeNotificationsServiceWorkerServer interface {
	mustEmbedUnimplementedNotificationsServiceWorkerServer()
}

func RegisterNotificationsServiceWorkerServer(s grpc.ServiceRegistrar, srv NotificationsServiceWorkerServer) {
	s.RegisterService(&_NotificationsServiceWorker_serviceDesc, srv)
}

func _NotificationsServiceWorker_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceWorkerServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.NotificationsServiceWorker/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceWorkerServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationsServiceWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.NotificationsServiceWorker",
	HandlerType: (*NotificationsServiceWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationsServiceWorker_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/grpc/proto/notifications.proto",
}
