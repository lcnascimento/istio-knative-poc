// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AudiencesServiceFrontendClient is the client API for AudiencesServiceFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudiencesServiceFrontendClient interface {
	GetAudience(ctx context.Context, in *GetAudienceRequest, opts ...grpc.CallOption) (*GetAudienceResponse, error)
	ListAudiences(ctx context.Context, in *ListAudiencesRequest, opts ...grpc.CallOption) (*ListAudiencesResponse, error)
	EnqueueAudienceSending(ctx context.Context, in *EnqueueAudienceSendingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type audiencesServiceFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewAudiencesServiceFrontendClient(cc grpc.ClientConnInterface) AudiencesServiceFrontendClient {
	return &audiencesServiceFrontendClient{cc}
}

func (c *audiencesServiceFrontendClient) GetAudience(ctx context.Context, in *GetAudienceRequest, opts ...grpc.CallOption) (*GetAudienceResponse, error) {
	out := new(GetAudienceResponse)
	err := c.cc.Invoke(ctx, "/grpc.AudiencesServiceFrontend/GetAudience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audiencesServiceFrontendClient) ListAudiences(ctx context.Context, in *ListAudiencesRequest, opts ...grpc.CallOption) (*ListAudiencesResponse, error) {
	out := new(ListAudiencesResponse)
	err := c.cc.Invoke(ctx, "/grpc.AudiencesServiceFrontend/ListAudiences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *audiencesServiceFrontendClient) EnqueueAudienceSending(ctx context.Context, in *EnqueueAudienceSendingRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.AudiencesServiceFrontend/EnqueueAudienceSending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudiencesServiceFrontendServer is the server API for AudiencesServiceFrontend service.
// All implementations must embed UnimplementedAudiencesServiceFrontendServer
// for forward compatibility
type AudiencesServiceFrontendServer interface {
	GetAudience(context.Context, *GetAudienceRequest) (*GetAudienceResponse, error)
	ListAudiences(context.Context, *ListAudiencesRequest) (*ListAudiencesResponse, error)
	EnqueueAudienceSending(context.Context, *EnqueueAudienceSendingRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedAudiencesServiceFrontendServer()
}

// UnimplementedAudiencesServiceFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedAudiencesServiceFrontendServer struct {
}

func (UnimplementedAudiencesServiceFrontendServer) GetAudience(context.Context, *GetAudienceRequest) (*GetAudienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudience not implemented")
}
func (UnimplementedAudiencesServiceFrontendServer) ListAudiences(context.Context, *ListAudiencesRequest) (*ListAudiencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudiences not implemented")
}
func (UnimplementedAudiencesServiceFrontendServer) EnqueueAudienceSending(context.Context, *EnqueueAudienceSendingRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueAudienceSending not implemented")
}
func (UnimplementedAudiencesServiceFrontendServer) mustEmbedUnimplementedAudiencesServiceFrontendServer() {
}

// UnsafeAudiencesServiceFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudiencesServiceFrontendServer will
// result in compilation errors.
type UnsafeAudiencesServiceFrontendServer interface {
	mustEmbedUnimplementedAudiencesServiceFrontendServer()
}

func RegisterAudiencesServiceFrontendServer(s grpc.ServiceRegistrar, srv AudiencesServiceFrontendServer) {
	s.RegisterService(&_AudiencesServiceFrontend_serviceDesc, srv)
}

func _AudiencesServiceFrontend_GetAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudiencesServiceFrontendServer).GetAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AudiencesServiceFrontend/GetAudience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudiencesServiceFrontendServer).GetAudience(ctx, req.(*GetAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudiencesServiceFrontend_ListAudiences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAudiencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudiencesServiceFrontendServer).ListAudiences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AudiencesServiceFrontend/ListAudiences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudiencesServiceFrontendServer).ListAudiences(ctx, req.(*ListAudiencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AudiencesServiceFrontend_EnqueueAudienceSending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueAudienceSendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudiencesServiceFrontendServer).EnqueueAudienceSending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AudiencesServiceFrontend/EnqueueAudienceSending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudiencesServiceFrontendServer).EnqueueAudienceSending(ctx, req.(*EnqueueAudienceSendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AudiencesServiceFrontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AudiencesServiceFrontend",
	HandlerType: (*AudiencesServiceFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAudience",
			Handler:    _AudiencesServiceFrontend_GetAudience_Handler,
		},
		{
			MethodName: "ListAudiences",
			Handler:    _AudiencesServiceFrontend_ListAudiences_Handler,
		},
		{
			MethodName: "EnqueueAudienceSending",
			Handler:    _AudiencesServiceFrontend_EnqueueAudienceSending_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/grpc/proto/audiences.proto",
}

// AudiencesServiceWorkerClient is the client API for AudiencesServiceWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AudiencesServiceWorkerClient interface {
	SendAudience(ctx context.Context, in *SendAudienceRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type audiencesServiceWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewAudiencesServiceWorkerClient(cc grpc.ClientConnInterface) AudiencesServiceWorkerClient {
	return &audiencesServiceWorkerClient{cc}
}

func (c *audiencesServiceWorkerClient) SendAudience(ctx context.Context, in *SendAudienceRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/grpc.AudiencesServiceWorker/SendAudience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AudiencesServiceWorkerServer is the server API for AudiencesServiceWorker service.
// All implementations must embed UnimplementedAudiencesServiceWorkerServer
// for forward compatibility
type AudiencesServiceWorkerServer interface {
	SendAudience(context.Context, *SendAudienceRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedAudiencesServiceWorkerServer()
}

// UnimplementedAudiencesServiceWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedAudiencesServiceWorkerServer struct {
}

func (UnimplementedAudiencesServiceWorkerServer) SendAudience(context.Context, *SendAudienceRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAudience not implemented")
}
func (UnimplementedAudiencesServiceWorkerServer) mustEmbedUnimplementedAudiencesServiceWorkerServer() {
}

// UnsafeAudiencesServiceWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AudiencesServiceWorkerServer will
// result in compilation errors.
type UnsafeAudiencesServiceWorkerServer interface {
	mustEmbedUnimplementedAudiencesServiceWorkerServer()
}

func RegisterAudiencesServiceWorkerServer(s grpc.ServiceRegistrar, srv AudiencesServiceWorkerServer) {
	s.RegisterService(&_AudiencesServiceWorker_serviceDesc, srv)
}

func _AudiencesServiceWorker_SendAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AudiencesServiceWorkerServer).SendAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.AudiencesServiceWorker/SendAudience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AudiencesServiceWorkerServer).SendAudience(ctx, req.(*SendAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AudiencesServiceWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AudiencesServiceWorker",
	HandlerType: (*AudiencesServiceWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAudience",
			Handler:    _AudiencesServiceWorker_SendAudience_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/grpc/proto/audiences.proto",
}
